name: CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: friendy21
  IMAGE_NAME: cicd-nomad-app
  NODE_VERSION: '18'

jobs:
  # Security scanning job
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and test job
  build-test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
          # Security scanning for image
          sbom: true
          provenance: true

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          NOMAD_ADDR: ${{ secrets.STAGING_NOMAD_ADDR }}
          NOMAD_TOKEN: ${{ secrets.STAGING_NOMAD_TOKEN }}
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ secrets.MANAGEMENT_SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true

      - name: Deploy to Nomad via Management Server
        env:
          IMAGE_TAG: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        run: |
          # Copy Nomad job file to management server
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            nomad/app.nomad \
            root@${{ secrets.MANAGEMENT_SERVER_IP }}:/tmp/app.nomad
          
          # Deploy using Nomad with ACL token
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            root@${{ secrets.MANAGEMENT_SERVER_IP }} << 'ENDSSH'
          set -e
          
          # Export Nomad configuration
          export NOMAD_TOKEN="${{ secrets.NOMAD_TOKEN }}"
          export NOMAD_ADDR="http://127.0.0.1:4646"
          
          # Update image in job file
          sed -i "s|REPLACE_IMAGE|${{ env.IMAGE_TAG }}|g" /tmp/app.nomad
          
          # Plan the deployment
          echo "Planning Nomad deployment..."
          nomad job plan /tmp/app.nomad || true
          
          # Validate and run the job
          echo "Validating job specification..."
          nomad job validate /tmp/app.nomad
          
          echo "Running Nomad job..."
          nomad job run -check-index 0 /tmp/app.nomad
          
          # Wait for deployment to complete
          echo "Waiting for deployment..."
          sleep 10
          
          # Check deployment status
          nomad job status app
          
          # Check allocation health
          nomad job status -verbose app | grep -A5 "Deployed"
          ENDSSH

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no \
            root@${{ secrets.MANAGEMENT_SERVER_IP }} << 'ENDSSH'
          # Verify service is healthy in Consul
          export CONSUL_HTTP_TOKEN="${{ secrets.CONSUL_TOKEN }}"
          consul catalog services
          consul health state passing
          ENDSSH

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "Deployment completed with status: ${{ job.status }}"
          # Add Slack/Email notification logic here
