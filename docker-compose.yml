version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
      args:
        VERSION: local-dev
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        COMMIT_SHA: local-development
    image: friendy21/nomad-app:local
    container_name: nomad-app-local
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/appdb
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - app_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - consul
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: nomad-postgres-local
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: nomad-redis-local
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Consul for service discovery (local development)
  consul:
    image: consul:1.16
    container_name: nomad-consul-local
    command: >
      consul agent
      -dev
      -client=0.0.0.0
      -ui
      -log-level=INFO
      -data-dir=/consul/data
    volumes:
      - consul_data:/consul/data
      - ./consul/config:/consul/config:ro
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nomad (local development)
  nomad:
    image: multani/nomad:1.6
    container_name: nomad-server-local
    command: >
      nomad agent
      -dev
      -bind=0.0.0.0
      -log-level=INFO
      -data-dir=/nomad/data
    volumes:
      - nomad_data:/nomad/data
      - ./nomad/config:/nomad/config:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "4646:4646"
    networks:
      - app-network
    depends_on:
      - consul
    restart: unless-stopped
    privileged: true
    healthcheck:
      test: ["CMD", "nomad", "node", "status"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Traefik reverse proxy (optional)
  traefik:
    image: traefik:v3.0
    container_name: nomad-traefik-local
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.consul.endpoints=consul:8500"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--log.level=INFO"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - app-network
    depends_on:
      - consul
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: nomad-prometheus-local
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: nomad-grafana-local
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: unless-stopped

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  consul_data:
    driver: local
  nomad_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

